(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{376:function(a,t,s){"use strict";s.r(t);var r=s(25),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"nginx-通关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-通关"}},[a._v("#")]),a._v(" nginx 通关")]),a._v(" "),s("h1",{attrs:{id:"什么是-nginx？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-nginx？"}},[a._v("#")]),a._v(" 什么是 nginx？")]),a._v(" "),s("p",[a._v("nginx 是一个开源可靠的 HTTP 中间件代理服务。")]),a._v(" "),s("h1",{attrs:{id:"配置目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置目录"}},[a._v("#")]),a._v(" 配置目录")]),a._v(" "),s("h2",{attrs:{id:"主配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主配置文件"}},[a._v("#")]),a._v(" 主配置文件")]),a._v(" "),s("p",[a._v("/etc/nginx/nginx.conf "),s("br"),a._v("\n配置文件基本结构：\n"),s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/23/16df76f566fe407b?w=1516&h=668&f=png&s=47231",alt:""}})]),a._v(" "),s("h1",{attrs:{id:"nginx-开启，关闭，重启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-开启，关闭，重启"}},[a._v("#")]),a._v(" nginx 开启，关闭，重启")]),a._v(" "),s("p",[a._v("开启 systemctl start nginx\n关闭 nginx -s stop\n重启，nginx -s reload （这个一般是在修改配置文件后，先用 nginx -t 检查配置语法是否正确后，再用 nginx -s reload 平滑重启）")]),a._v(" "),s("h2",{attrs:{id:"日志文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日志文件"}},[a._v("#")]),a._v(" 日志文件")]),a._v(" "),s("p",[a._v("/var/log/nginx")]),a._v(" "),s("h1",{attrs:{id:"发生错误的时候查找方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发生错误的时候查找方法"}},[a._v("#")]),a._v(" 发生错误的时候查找方法")]),a._v(" "),s("p",[a._v("最重要的就是错误日志，错误日志，错误日志，当发生错误的时候，首先第一要想到去查看错误日志，查看发生错误的原因。")]),a._v(" "),s("ul",[s("li",[a._v("1，首先查看错误日志\ntail -n 10 /var/log/nginx/error.log")]),a._v(" "),s("li",[a._v("2，找到错误原因，修改配置文件\n/etc/nginx/conf.d/default.conf")]),a._v(" "),s("li",[a._v("3，查看修改的错误命令是否争取\nnginx -t")]),a._v(" "),s("li",[a._v("4，平滑重启\nnginx -s reload")])]),a._v(" "),s("h1",{attrs:{id:"server-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#server-name"}},[a._v("#")]),a._v(" server_name")]),a._v(" "),s("h2",{attrs:{id:"优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先级"}},[a._v("#")]),a._v(" 优先级")]),a._v(" "),s("p",[a._v("1，当在多个 serve 中匹配了相同的 server_name\n最先出现的优先级是最高的。")]),a._v(" "),s("h1",{attrs:{id:"location"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#location"}},[a._v("#")]),a._v(" location")]),a._v(" "),s("h2",{attrs:{id:"location-匹配规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#location-匹配规则"}},[a._v("#")]),a._v(" location 匹配规则")]),a._v(" "),s("ul",[s("li",[a._v("1 = 表示精确匹配。只有请求的 url 路径与后面的字符串完全相等时，才会命中。")]),a._v(" "),s("li",[a._v("2 ~ 表示该规则是使用正则定义的，区分大小写。")]),a._v(" "),s("li",[a._v("3 ~* 表示该规则是使用正则定义的，不区分大小写。")]),a._v(" "),s("li",[a._v("4 ^~ 表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找。\n匹配顺序")]),a._v(" "),s("li",[a._v("1 如果匹配到 = ， 也就是精确匹配到 url，则返回")]),a._v(" "),s("li",[a._v("2 如果匹配到^~,则返回，并且不会想下匹配。这里我曾经遇到过在同一服务器上同时部署两个 react 单页项目的时候，一个 react A 项目放在/home 目录下，一个 react B 项目放在/codsse 目录下，因为写了如下规则")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("^~ /codsse {\n    ...\n}\n")])])]),s("p",[a._v("导致当 url 是/codesse/的时候，可以匹配到 B 项目的 index.html,但是同时在 B 中 index.html 中的 js 也匹配到了 B 项目的 index.html,所以导致形成了一个死循环。")]),a._v(" "),s("ul",[s("li",[a._v("3 接下来匹配正则表达式的，~ 或者~*的，如果匹配到则返回")]),a._v(" "),s("li",[a._v("4 最后都没匹配到，则返回最大匹配的或者 404")]),a._v(" "),s("li",[a._v("5 = > ^~ > ~/~* 优先级")])]),a._v(" "),s("h1",{attrs:{id:"try-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-files"}},[a._v("#")]),a._v(" try_files")]),a._v(" "),s("p",[a._v("try_files 试图寻找的文件")]),a._v(" "),s("h1",{attrs:{id:"alias-与-root-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#alias-与-root-的区别"}},[a._v("#")]),a._v(" alias 与 root 的区别")]),a._v(" "),s("p",[a._v("root 会把匹配到 location 连在一起去访问\n比如有以下配置")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("location "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("cat "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    root "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("cat"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("imgs"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("当访问 xx/cat/a.png 的时候，实际上是到 /cat/imgs/cat/a.png 中去寻找\n当 alias 是/cat/imgs 的时候，同样的网址，实际上到/cat/imgs/a.png 中去寻找")]),a._v(" "),s("h1",{attrs:{id:"nginx-的访问控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-的访问控制"}},[a._v("#")]),a._v(" nginx 的访问控制")]),a._v(" "),s("h2",{attrs:{id:"http-access-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-access-module"}},[a._v("#")]),a._v(" http_access_module")]),a._v(" "),s("p",[a._v("deny 拒绝访问"),s("br"),a._v("\nallow 可以访问")]),a._v(" "),s("h1",{attrs:{id:"作为静态资源服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作为静态资源服务器"}},[a._v("#")]),a._v(" 作为静态资源服务器")]),a._v(" "),s("h2",{attrs:{id:"压缩静态资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#压缩静态资源"}},[a._v("#")]),a._v(" 压缩静态资源")]),a._v(" "),s("p",[a._v("1， gzip：on"),s("br"),a._v("\n        gzip_comp_level: 2 (压缩级别)"),s("br")]),a._v(" "),s("h2",{attrs:{id:"设置过期时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置过期时间"}},[a._v("#")]),a._v(" 设置过期时间")]),a._v(" "),s("p",[a._v("一般浏览器首先会检查 max-age，如果过期，则会发送 etag 和 Last-Modified 到服务器验证\n1， 设置过期时间"),s("br"),a._v("\n       expires")]),a._v(" "),s("h1",{attrs:{id:"正向代理和反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正向代理和反向代理"}},[a._v("#")]),a._v(" 正向代理和反向代理")]),a._v(" "),s("h2",{attrs:{id:"正向代理？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正向代理？"}},[a._v("#")]),a._v(" 正向代理？")]),a._v(" "),s("p",[a._v("正向代理就是代理客户端发起请求，比如我们经常使用的 vpn")]),a._v(" "),s("h2",{attrs:{id:"反向代理？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向代理？"}},[a._v("#")]),a._v(" 反向代理？")]),a._v(" "),s("p",[a._v("就是在服务器端进行代理，比如你访问一个域名，并不知道真正的实际资源是否通过 nginx 给代理到哪里去了。")]),a._v(" "),s("h1",{attrs:{id:"跨域访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域访问"}},[a._v("#")]),a._v(" 跨域访问")]),a._v(" "),s("p",[a._v("设置可以 nginx 允许可以跨域访问")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("location /sddss/ {\n       proxy_redirect off; # 关闭重定向\n       add_header Access-Control-Allow-Origin *;\n   }\n")])])]),s("h1",{attrs:{id:"负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[a._v("#")]),a._v(" 负载均衡")]),a._v(" "),s("p",[a._v("所谓的负载均衡其实就是通过 nginx 把请求转发到不同的服务器上面去。\n每个服务可以配置一些参数，比如 weight 权重，比如 max_fails 等\n负载均衡也可以选择不同的算法，比如轮询，比如 ip—hash 算法和 url—hash 算法等")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("upsteam ii {\n    serve 1;\n    serve 2;\n}\nserver {\n    location / {\n        proxy_pass ii;\n        include proxy_params;\n    }\n}\n")])])]),s("h1",{attrs:{id:"nginx-作为缓存服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-作为缓存服务器"}},[a._v("#")]),a._v(" nginx 作为缓存服务器")]),a._v(" "),s("p",[a._v("nginx 作为中间缓存，使用 proxy_cache_path")]),a._v(" "),s("h1",{attrs:{id:"nginx-重定向-url"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-重定向-url"}},[a._v("#")]),a._v(" nginx 重定向 url")]),a._v(" "),s("p",[a._v("可以通过 rewrite 根据正则匹配，把匹配到的 url 重定向到别的 url 中去")]),a._v(" "),s("h2",{attrs:{id:"rewrite-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rewrite-语法"}},[a._v("#")]),a._v(" rewrite 语法")]),a._v(" "),s("p",[a._v("rewrite 正则 flag "),s("br"),a._v("\nflag 包括 break，last,redirect，permanent\nbreak 会直接去查找"),s("br"),a._v("\n而 last 相当于会继续向下匹配"),s("br"),a._v("\nrediect 临时重定向"),s("br"),a._v("\npermanent 永久重定向")]),a._v(" "),s("h2",{attrs:{id:"rewrite-优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rewrite-优先级"}},[a._v("#")]),a._v(" rewrite 优先级")]),a._v(" "),s("p",[a._v("sever 中的 rewrite 规则 > location 中的 rewrite 规则")]),a._v(" "),s("h1",{attrs:{id:"nginx-链接周期限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-链接周期限制"}},[a._v("#")]),a._v(" nginx 链接周期限制")]),a._v(" "),s("h2",{attrs:{id:"使用模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用模块"}},[a._v("#")]),a._v(" 使用模块")]),a._v(" "),s("p",[a._v("secure_link_module\n原理就是首先 nginx 根据一些信息返回下载链接包括 md5 和 expries，然后下载的时候，nginx 在进行验证 md5 和过期时间。\n返回链接如下：\n/download?mad5=dsdsd&expries=112233222")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("location "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("~")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   secure_link\n   secure_link_md5\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h1",{attrs:{id:"nginx-区分国内外-ip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-区分国内外-ip"}},[a._v("#")]),a._v(" nginx 区分国内外 ip")]),a._v(" "),s("h2",{attrs:{id:"使用模块-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用模块-2"}},[a._v("#")]),a._v(" 使用模块")]),a._v(" "),s("p",[a._v("http_geoip_module\n可以根据访问的 ip 是否是国内 ip，来进行限制访问")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("location "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("$geoip_country_code "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("403")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h1",{attrs:{id:"nginx-https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-https"}},[a._v("#")]),a._v(" nginx https")]),a._v(" "),s("h2",{attrs:{id:"https-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-配置"}},[a._v("#")]),a._v(" https 配置")]),a._v(" "),s("p",[a._v("*1 安装 openssl http_ssl_module\n*2 生成 CA 证书\n*3 配置")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("server {\n    listen      443;\n    server_name www.onedns.net;\n    ssl         on;\n    ssl_certificate     /etc/nginx/ssl/111net.pem;\n    ssl_certificate_key /etc/nginx/ssl/2222.key;\n    ssl_protocols       Tddsdss;\n    ssl_ciphers         dddssdss;\n")])])]),s("h2",{attrs:{id:"https-服务优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-服务优化"}},[a._v("#")]),a._v(" https 服务优化")]),a._v(" "),s("p",[a._v("*1 激活 keepalive 长链接\n*2 激活 ssl cache 缓存")]),a._v(" "),s("h2",{attrs:{id:"nginx-lua"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-lua"}},[a._v("#")]),a._v(" nginx+ Lua")]),a._v(" "),s("h2",{attrs:{id:"lua-基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lua-基础语法"}},[a._v("#")]),a._v(" Lua 基础语法")]),a._v(" "),s("ul",[s("li",[a._v("1 ~= 表示不等于")]),a._v(" "),s("li",[a._v("2 字符串拼接 ..")])]),a._v(" "),s("h2",{attrs:{id:"根据-ip-进行不同内容的访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根据-ip-进行不同内容的访问"}},[a._v("#")]),a._v(" 根据 ip 进行不同内容的访问")]),a._v(" "),s("p",[a._v("基本原理： 当用户访问的时候，nginx 获得用户的 ip，然后通过 lua 去访问 ip 数据库，然后让不同的 ip 访问不同的内容。")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("location "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    default_type "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"text/html"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    content_by_lua_file "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("opt"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lua"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h1",{attrs:{id:"nginx-性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-性能优化"}},[a._v("#")]),a._v(" nginx 性能优化")]),a._v(" "),s("h2",{attrs:{id:"ab-接口压力测试工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ab-接口压力测试工具"}},[a._v("#")]),a._v(" ab 接口压力测试工具")]),a._v(" "),s("p",[a._v("ab -n 2000 -c 2 http://127.0.0.1")]),a._v(" "),s("h2",{attrs:{id:"cpu-亲和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu-亲和"}},[a._v("#")]),a._v(" cpu 亲和")]),a._v(" "),s("p",[a._v("设置 worker process 为 cpu 核数")]),a._v(" "),s("h1",{attrs:{id:"nginx-安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-安全"}},[a._v("#")]),a._v(" nginx 安全")]),a._v(" "),s("h2",{attrs:{id:"常见的攻击手段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的攻击手段"}},[a._v("#")]),a._v(" 常见的攻击手段")]),a._v(" "),s("ul",[s("li",[a._v("1 密码撞库")]),a._v(" "),s("li",[a._v("2 文件上传漏洞")]),a._v(" "),s("li",[a._v("3 sql 注入")])])])}),[],!1,null,null,null);t.default=e.exports}}]);